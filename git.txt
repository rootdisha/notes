########### GIT ###########

git config --global --list             : Lists all global configuration settings
git config --list 		       : Lists all config settings for current repo

git remote -v   : List all remote urls
git remote rename origin old_origin        : Renames origin to "old_origin" (or anything given). Usually used while updating origin to a new remote url.
git remote add <remote name> <remote url>  : Adds a new remote <remote name> with given remote url. Usually done to add an origin
    ex: git remote add origin <repo url to be used as origin>
git remote remove <remote name>		: Removes remote <remote name> which exists
    ex: git remote remove origin # removes currently set origin remote

git remote update origin --prune  : To update remote branch list. 
git branch -vv | findstr "gone]" : Lists all local branches that are no longer in remote
git remote add origin <origin> - add origin

$ git push -d origin <branch_name>    : to delete remote branch
$ git branch -d <branch_name>           : to delete local branch

---local branch to be linked to remote branch -----
git fetch               -- to download remote branch origin
git branch --set-upstream-to origin/<branch>          -- set remote origin
---all set.----

git push origin <branch>: push to remote
git checkout -b <branch_new> - create new branch. 
git checkout <branch> - switch to <branch>
git pull - fetch and merge remote changes
git pull origin <branch> - pulls <branch> commits into current branch and merges.
git merge <another_branch> - merge another branch to active branch

# Mirroring: to pull changes from original repo from which mirroring was done:
git pull <url of other repo> <other repo branch>:<current repo branch> 
   ex: git pull https://github.com/obviyus/SuperSeriousBot.git master:main

git commit --amend     ---- commit only exists in your local repo & not been pushed


git log --oneline --graph --decorate : pretty log
git log --follow <path to file>: history beyond renames/refactors
git log --graph --pretty=format:'%C(auto)%h%d (%cr) %cn <%ce> %s'

### Stashing
git stash [save <name>]
[git clean        clean
              -n or --dry-run       preview damage
	  -f     untracked incl
              -fd    directories incl
              -fX    ignored files incl
              -fx    non ignored files incl

]
git checkout <branch>
git stash apply stash@{my_desired_stash}  /  git stash pop
git stash list            - show all stashes
git stash drop [ stash@{my_saved_stash}]                   delete stash

git stash show -p [ stash@{saved_stash} ]         view changes in the stash

### Tagging
git show-ref --tags --abbrev -d             : list tags
git tag -l <wildcard tag name>
git tag :                                                  for all tags
git tag v2.4 :                                           lightweight tag
git tag -a v2.4 -m "my version 2.4"        : annotated tag
git tag -a v2.4 <commit id> -m "my version 2.4"
git tag -d v2.4-lw                                : Delete
By default, the git push command doesnâ€™t transfer tags to remote servers.
git push origin --tags                          : push all tags
git push origin v2.4                              : push one (or more if multiple are listed)
git push origin --delete <tagname>
### Moving a tag
git push origin :refs/tags/<tagname>
git tag -fa <tagname> [-m "comment"]
git push origin master --tags

### Diff/ Patches
git diff sha1..sha2 --name-only
git diff sha1..sha2 [-- <files separated by space>] > my.patch
git diff > mypatch.patch               : uncommitted working directory with HEAD
git diff --cached > mypatch.patch  : staged uncommited
git apply < patchname.patch
git diff branch1..branch2                  -- diff between branches
